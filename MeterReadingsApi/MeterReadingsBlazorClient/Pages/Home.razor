@page "/"
@inject HttpClient Http

<PageTitle>Accounts</PageTitle>

<Row>
    <Column ColumnSize="ColumnSize.Is6">
        <DataGrid TItem="AccountDto"
                  Data="@accounts"
                  SelectionMode="DataGridSelectionMode.Single"
                  SelectedRowChanged="OnAccountSelected" Striped Bordered Virtualize VirtualizeOptions="@(new VirtualizeOptions() { DataGridHeight = "1200px", DataGridMaxHeight = "1200px" })">
            <DataGridColumn TItem="AccountDto" Field="@nameof(AccountDto.AccountId)" Caption="Account ID" />
            <DataGridColumn TItem="AccountDto" Field="@nameof(AccountDto.FirstName)" Caption="First Name" />
            <DataGridColumn TItem="AccountDto" Field="@nameof(AccountDto.LastName)" Caption="Last Name" />
        </DataGrid>
    </Column>
    <Column ColumnSize="ColumnSize.Is6">
        <DataGrid TItem="MeterReadingDto" Data="@meterReadings" Striped Bordered Virtualize VirtualizeOptions="@(new VirtualizeOptions() { DataGridHeight = "1200px", DataGridMaxHeight = "1200px" })">
            <DataGridColumn TItem="MeterReadingDto" Field="@nameof(MeterReadingDto.MeterReadingDateTime)" Caption="Reading Date/Time">
                <DisplayTemplate>
                    @{
                        DateTime meterReadingDateTime = (context as MeterReadingDto).MeterReadingDateTime;
                        @meterReadingDateTime.ToString("ddMMMyy HH:mm")
                    }
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="MeterReadingDto" Field="@nameof(MeterReadingDto.MeterReadValue)" Caption="Value" />
        </DataGrid>
    </Column>
</Row>

@code {
    private IList<AccountDto>? accounts;
    private IList<MeterReadingDto>? meterReadings;

    protected override async Task OnInitializedAsync()
    {
        accounts = await Http.GetFromJsonAsync<IList<AccountDto>>("accounts");
    }

    private async Task OnAccountSelected(AccountDto account)
    {
        var response = await Http.GetAsync($"accounts/{account.AccountId}/meter-readings");
        if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
        {
            meterReadings = Array.Empty<MeterReadingDto>();
        }
        else
        {
            response.EnsureSuccessStatusCode();
            meterReadings = await response.Content.ReadFromJsonAsync<IList<MeterReadingDto>>();
        }
    }
}